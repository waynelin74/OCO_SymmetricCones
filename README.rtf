{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Bold;\f2\froman\fcharset0 Times-Italic;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red127\green127\blue127;}
{\*\expandedcolortbl;;\csgray\c0;\cssrgb\c57046\c57047\c57046;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13880\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 This README file is divided into two parts which explain the code files and how they can be used to generate the figures:
\f1\b \
	I - PARAMETERS USED TO GENERATE EACH FIGURE
\f0\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 	II - CODE FILES AND DEPENDENCIES	\
	III - Notes on randomization\ul \
\ulnone \
Part I 
\f0\b0 contains the exact plotter files and parameters used to generate each figure/table. To recreate the figures/tables, simply paste the parameters given into the \'93\'94\'94PARAMETERS\'94\'94\'94 section of the plotter file.
\f1\b \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 The code files are described in 
\f1\b Part II
\f0\b0 , and are divided into the following two categories:\
- 
\f2\i Plotter files 
\f0\i0 are run to generate the tables and figures. Parameters to get different plots are placed at the top of each plotter file, and their values can be adjusted. After choosing the appropriate parameters, run the whole .py file to get the plots.\
- 
\f2\i Helper files
\f0\i0  contain functions that are used by the plotter files (or higher-level helper files), and need not be touched.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Part III
\f0\b0  contains details on the randomization used in the code, should the user want to understand the randomization processes used in the code or to change the random seed.\

\f1\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 All code run using the following installations:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf2 \CocoaLigature0 Python 3.9.13
\f1\b\fs24 \cf0 \CocoaLigature1 \

\f3\b0\fs22 \cf2 \CocoaLigature0 NumPy 1.21.5\
SciPy 1.9.1
\f1\b\fs24 \cf0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 __________________________________________________________________________\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 I - PARAMETERS USED TO GENERATE EACH FIGURE\ulnone \
\
FIGURE 1 (ENTROPY)
\f0\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i \cf0 entropyplot.py
\f0\i0  and 
\f2\i bregmanplot.py
\f0\i0  in the entropy_viz folder.\
\
Parameters for bregmanplot.py (coordinates of reference point in Figure 1):\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf3 ref = np.array([0.3*0.7, 0.4*0.7, 0.5])\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 FIGURE 2 (SCMWU REGRET)
\f0\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i \cf0 SCMWU_plot.py
\f0\i0  in the OSCO folder.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf3 """Run parameters"""\
dims = [\
    (0, [], [2, 3, 4, 5, 6]),\
    (5, [], [5]),\
    (0, [3], [5]),\
    (3, [2,3], [2,3])\
]  # Dimension (3-tuple): (m, n, d), where\
    # m int: dimension of R^m direct-sum component;\
    # n list;\
    # d list.\
Ts = [\
    10**5\
] # Time Horizon (Integer)\
doubling = True # Set to TRUE to use doubling trick, FALSE for fixed stepsize (Bool)\
\
"""Multiplicity parameters"""\
many_SCMWU = 100 # Number of SCMWU trajectories (Integer >= 1)\
runs = 1 # Number of runs, i.e., number of plots.\
\
"""Randomization parameters"""\
seed = 1234\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 FIGURE 3 (SCMWU-BALL REGRET PLOTS)
\f0\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i \cf0 SCMWUball_plot.py
\f0\i0  in the OSCO folder.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf3 """Run parameters"""\
ds = [\
    2, 3, 5, 10\
] # list of dimensions of ball to learn over.\
Ts = [\
    10**4\
] # Time Horizon (Integer)\
doubling = True # Set to TRUE to use doubling trick, FALSE for fixed stepsize (Bool)\
OGD_compare = False # Set to TRUE if want to plot OGD (Bool)\
plot_bound = True # (Bool)\
\
"""Multiplicity parameters"""\
many_SCMWU = 100 # Number of SCMWU trajectories per plot (Integer >= 1)\
runs = 1 # Number of runs, i.e., number of plots.\
\
"""Randomization parameters"""\
seed = 1234\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 FIGURE 4 (SCMWU-BALL VS OGD)
\f0\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i \cf0 SCMWUball_plot.py
\f0\i0  in the OSCO folder.\cf3 \
\
"""Run parameters"""\
ds = [\
    10\
] # list of dimensions of ball to learn over.\
Ts = [\
    10**4\
] # Time Horizon (Integer)\
doubling = False # Set to TRUE to use doubling trick, FALSE for fixed stepsize (Bool)\
\
"""Multiplicity parameters"""\
many_SCMWU = 1 # Number of SCMWU trajectories per plot (Integer >= 1)\
runs = 10 # Number of runs, i.e., number of plots.\
\
"""Randomization parameters"""\
seed = 1234\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 TABLES 1 & 2 (SVM GAME PERFORMANCE)
\f0\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i \cf0 SVM_game_tabulate.py 
\f0\i0 in the OSCO folder.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf3 # Dataset parameters\
n = 10**3 # Number of data points per run\
ds = [\
    2, 3,\
    5, 10\
]# Dimension of data points\
margin = 0.1 # Linear classification margin (guaranteed for dataset)\
\
# Run parameters\
compute_time_horizon = False #If False, use T. If True, use margin_error to compute time_needed.\
if compute_time_horizon:\
    margin_error = 0.05 # Margin to guarantee\
    T = SVM_game.time_needed(margin_error, n)\
else:\
    Ts = [\
    10**2, 10**3\
    ] # Time Horizon (Integer)\
\
# Number of runs\
runs = 10**2\
\
# Randomization/seed parameters\
randseed = 1234 # (1234 was used for data, unless otherwise stated)\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 FIGURES 5 - 7 (SVM GAME VISUALIZATION)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i\b0 \cf0 SVM_game_run.py
\f0\i0  in the OSCO folder.\
(Set time horizon T below to 10**3, 10**4, and 10**5 for Figures 5, 6, and 7 respectively.)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf3 # Dataset parameters\
n = 10**3 # Number of data points per run\
d = 2 # Dimension of data points\
margin = 0.1 # Linear classification margin (guaranteed for dataset)\
\
# Run parameters\
compute_time_horizon = False #If False, use T. If True, use margin_error to compute time_needed.\
if compute_time_horizon:\
    margin_error = 0.05 # Margin to guarantee\
    T = SVMgame.time_needed(margin_error, n)\
else:\
    T = 10**3 # Time Horizon (Integer)\
print("T =", T)\
\
# Number of runs\
runs = 10**1\
\
# Randomization/seed parameters\
randseed = 1234 # (1234 was used for data, unless otherwise stated)\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 __________________________________________________________________________\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul II - CODE FILES AND DEPENDENCIES
\f0\b0 \ulnone \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 entropy_viz folder: Plotter files\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i\b0 \cf0 entropyplot.py
\f0\i0  and 
\f2\i bregmanplot.py
\f0\i0  contain the code for plotting the entropy and Bregman divergence over the trace-one slice of the 2-dimensional second-order cone (Figure 1). Parameters for 
\f2\i bregmanplot.py
\f0\i0  (choosing the reference point for the Bregman divergence) are at the top of the file, and can be adjusted.  Ruby the whole .py file to get the plots.\
- Uses 
\f2\i SOC.py
\f0\i0  for EJA operations relevant to the SOC.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 \
entropy_viz folder: Helper files\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i\b0 \cf0 SOC.py
\f0\i0  contains EJA operations relevant to the SOC.\
* Used in both 
\f2\i entropyplot.py
\f0\i0  and 
\f2\i bregmanplot.py
\f0\i0 .
\f1\b \

\f0\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 OSCO folder: Plotter files
\f0\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i \cf0 SCMWU_plot.py
\f0\i0  contains the code for plotting regret of SCMWU for the task of online linear optimization over the trace-1 slice of a symmetric cone (Figure 2). Parameters to get the different plots are at the top of the file, and can be adjusted. After choosing the appropriate parameters, run the whole .py file to get the plots.\
- Uses 
\f2\i SCMWU.py 
\f0\i0 for SCMWU algorithm.\
- Uses
\f2\i  SC_losses.py 
\f0\i0 for loss vector generation.\
\

\f2\i SCMWUball_plot.py
\f0\i0  contains the code for plotting regret of SCMWU_ball for the task of online linear optimization over the unit ball, with possible comparison to OGD (Figures 3 & 4). Parameters to get the different plots are at the top of the file, and can be adjusted. After choosing the appropriate parameters, run the whole .py file to get the plots.\
- Uses 
\f2\i SCMWU_ball.py
\f0\i0  for SCMWU_ball algorithm.\
- Uses 
\f2\i SC_losses.py
\f0\i0  for loss vector generation.\
\

\f2\i SVM_game_tabulate.py
\f0\i0  contains code for generating tables of the average and worst-case margins achieved by running the SCMWU against MWU in the SVM game (Tables 1 & 2). Parameters to get the different plots are at the top of the file, and can be adjusted. After choosing the appropriate parameters, run the whole .py file to get the plots.\
- Uses 
\f2\i SVMgame.py
\f0\i0  to run SVM game.\
- Uses 
\f2\i LinClass_datasets.py
\f0\i0  for dataset generation.\
\

\f2\i SVM_game_plot.py
\f0\i0  contains code for plotting visualizations of the classifiers achieved by running the SCMWU against MWU in the SVM game for data points of dimension 2 (Figures 5 - 7). Parameters to get the different plots are at the top of the file, and can be adjusted. After choosing the appropriate parameters, run the whole .py file to get the plots.\
- Uses 
\f2\i SVMgame.py
\f0\i0  to run SVM game.\
- Uses 
\f2\i LinClass_datasets.py
\f0\i0  for dataset generation.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 OSCO folder: Helper files
\f0\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul Symmetric cone operations\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i \cf0 \ulnone SC.py
\f0\i0  contains EJA operations over symmetric cones with direct-sum structure.\
* Used in 
\f2\i SCMWU.py
\f0\i0 .\
- Uses 
\f2\i SC_NO.py
\f0\i0 , 
\f2\i SC_PSD.py
\f0\i0 , and 
\f2\i SC_SOC.py
\f0\i0  for operations over the primitive symmetric cones.\
\

\f2\i SC_NO.py
\f0\i0  contains EJA operations over the nonnegative orthant.\
* Used in 
\f2\i SC.py
\f0\i0 .\
\

\f2\i SC_PSD.py
\f0\i0  contains EJA operations over the PSD cone.\
* Used in 
\f2\i SC.py
\f0\i0 .\
\

\f2\i SC_SOC.py
\f0\i0  contains EJA operations over the second-order cone.\
* Used in 
\f2\i SC.py
\f0\i0 .\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \
SCMWU algorithm\ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i \cf0 SCMWU.py
\f0\i0 \ul  \ulnone contains the SCMWU algorithm.\ul \
\ulnone * Used in 
\f2\i SCMWU_plot.py.\

\f0\i0 - Uses 
\f2\i SC.py 
\f0\i0 for EJA operations over symmetric cones.
\f2\i \

\f0\i0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul SCMWU-ball algorithm\ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i \cf0 SCMWUball.py
\f0\i0  contains the SCMWU-ball algorithm.\
* Used in 
\f2\i SCMWUball_plot.py, SVMgame.py
\f0\i0 .\
- Uses 
\f2\i helpers.py 
\f0\i0 for vector (Euclidean) length function.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul SVM game\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i \cf0 \ulnone SVMgame.py
\f0\i0  contains the code for running the SVM game.\
* Used in 
\f2\i SVM_game_tabulate.py, SVM_game_plot.py
\f0\i0 .\
- Uses 
\f2\i SCMWU.py
\f0\i0  for SCMWU algorithm (learning over ball).\
- Uses 
\f2\i MWU.py
\f0\i0  for MWU algorithm (learning over probability simplex).\
- Uses 
\f2\i helpers.py
\f0\i0  for vector length and normalization functions.\
\

\f2\i MWU.py
\f0\i0  contains the MWU (Multiplicative Weights Update) algorithm for learning over the probability simplex.\
* Used in 
\f2\i SVMgame.py.\

\f0\i0 - Uses 
\f2\i helpers.py
\f0\i0  for an exponential function that avoids numerical error when taking in very negative exponents.\ul \
\
Loss and Dataset generation\

\f2\i \ulnone SC_losses.py
\f0\i0  generates the losses for online optimization over symmetric cones and the ball.\
* Used in 
\f2\i SCMWU_plot.py, SCMWUball_plot.py.
\f0\i0  (Figures 2-4.)\
\

\f2\i LinClass_datasets.py
\f0\i0  generates the datasets for the SVM game.\
* Used in 
\f2\i SVM_game_tabulate.py, SVM_game_plot.py
\f0\i0 . (Tables 1-2, Figures 5-7.)\ul \
\ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul Others\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\i \cf0 \ulnone helpers.py
\f0\i0  contains miscellaneous helper functions, including an exponential function that avoids numerical error when taking in very negative exponents.\
* Used in 
\f2\i SCMWUball.py, SVMgame.py
\f0\i0 \ul ,\ulnone  and 
\f2\i MWU.py.
\f0\i0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 __________________________________________________________________________\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul III - Notes on randomization\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b0 \cf0 As the algorithms implemented are all deterministic, all the randomization happening in the code occurs in the randomization of losses. All of these are confined to the 
\f2\i SC_losses.py
\f0\i0  helper file, and pseudocode can be found in the comments there. (distr=\'91ball\'92 is used in all function calls.)\
\
The random seed has been set to the value 1234 in all plotter files to be able to recreate the same plots. To change the seed, simply find the seed in the \'93\'94\'94PARAMETERS\'94\'94\'94 section of the file and change it.}